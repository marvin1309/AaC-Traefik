stages:
  - generate
  - deploy

variables:
  # Namespace und Name aus galaxy.yml für die Collection
  COLLECTION_NAMESPACE: "iac_services"
  COLLECTION_NAME: "traefik"

generate-configs:
  stage: generate
  image: python:3.9-slim
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  tags:
    - docker
  before_script:
    # Install git, which is not included in the slim image
    - apt-get update && apt-get install -y git
  script:
    # 1. Install dependencies
    - pip install -r requirements.txt

    # 2. Generate all deployment types
    - python scripts/generate_manifest.py --ssot-file service.yml --deployment-type docker_compose
    - python scripts/generate_manifest.py --ssot-file service.yml --deployment-type kubernetes

    # 3. Commit the generated files if there are any changes
    - |
      if ! git diff --quiet --exit-code deployments/; then
        echo "Änderungen in 'deployments/' erkannt. Committe die neuen Konfigurationen."
        git config --global user.name "${GITLAB_USER_NAME}"
        git config --global user.email "${GITLAB_USER_EMAIL}"
        git add deployments/
        git commit -m "ci: Konfigurationen automatisch generiert [skip ci]"
        git push -o ci.skip "https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_REPOSITORY_URL#*@}" HEAD:main
      else
        echo "Keine Änderungen in den generierten Konfigurationen."
      fi

deploy-to-production:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG # Nur ausführen, wenn ein Git-Tag erstellt wird (z.B. v1.1.0)
  trigger:
    project: 'dein-gitlab-user/infra-stack' # <-- PFAD ZU DEINEM INFRA-STACK REPO
    branch: main
    strategy: depend
  variables:
    TARGET_HOSTS: "docker" # Ansible-Gruppe, auf die deployt werden soll
    SERVICE_COLLECTION_NAMESPACE: $COLLECTION_NAMESPACE
    SERVICE_COLLECTION_NAME: $COLLECTION_NAME
    SERVICE_COLLECTION_VERSION: $CI_COMMIT_TAG
    SERVICE_COLLECTION_URL: $CI_REPOSITORY_URL
